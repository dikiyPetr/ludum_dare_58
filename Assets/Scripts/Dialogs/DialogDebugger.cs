using UnityEngine;
using System.Collections.Generic;

namespace Dialogs
{
    /// <summary>
    /// –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –¥–∏–∞–ª–æ–≥–æ–≤
    /// </summary>
    public class DialogDebugger : MonoBehaviour
    {
        [Header("–û—Ç–ª–∞–¥–∫–∞")]
        [SerializeField] private bool showDebugInfo = true;
        [SerializeField] private string testDialogId = "interview_witness";

        private void OnEnable()
        {
            // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è –¥–∏–∞–ª–æ–≥–æ–≤
            DialogManager.OnDialogStarted += OnDialogStarted;
            DialogManager.OnDialogEnded += OnDialogEnded;
            DialogManager.OnNodePlayed += OnNodePlayed;
            
            // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏
            HighlightManager.OnHighlightsUpdated += OnHighlightsUpdated;
            HighlightManager.OnTooltipRequested += OnTooltipRequested;
        }

        private void OnDisable()
        {
            // –û—Ç–ø–∏—Å–∫–∞ –æ—Ç —Å–æ–±—ã—Ç–∏–π
            DialogManager.OnDialogStarted -= OnDialogStarted;
            DialogManager.OnDialogEnded -= OnDialogEnded;
            DialogManager.OnNodePlayed -= OnNodePlayed;
            
            // –û—Ç–ø–∏—Å–∫–∞ –æ—Ç —Å–æ–±—ã—Ç–∏–π –ø–æ–¥—Å–≤–µ—Ç–∫–∏
            HighlightManager.OnHighlightsUpdated -= OnHighlightsUpdated;
            HighlightManager.OnTooltipRequested -= OnTooltipRequested;
        }

        private void OnDialogStarted(Dialog dialog)
        {
            if (showDebugInfo)
            {
                Debug.Log($"üîµ –î–∏–∞–ª–æ–≥ –Ω–∞—á–∞—Ç: {dialog.id} (–ì–æ–≤–æ—Ä—è—â–∏–π: {dialog.speaker})");
            }
        }

        private void OnDialogEnded(Dialog dialog)
        {
            if (showDebugInfo)
            {
                Debug.Log($"üî¥ –î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω: {dialog.id}");
            }
        }

        private void OnNodePlayed(DialogNode node)
        {
            if (showDebugInfo)
            {
                Debug.Log($"üí¨ –£–∑–µ–ª –ø—Ä–æ–∏–≥—Ä–∞–Ω: {node.id}");
                Debug.Log($"   –¢–µ–∫—Å—Ç: {node.text}");
                
                if (node.notebookEntries.Count > 0)
                {
                    Debug.Log($"   üìù –ó–∞–ø–∏—Å–∏ –≤ –±–ª–æ–∫–Ω–æ—Ç: {node.notebookEntries.Count}");
                    foreach (var entry in node.notebookEntries)
                    {
                        Debug.Log($"      - –£–ª–∏–∫–∞ '{entry.clueId}': {entry.description}");
                    }
                }

                if (node.highlights.Count > 0)
                {
                    Debug.Log($"   üîç –ü–æ–¥—Å–≤–µ—Ç–∫–∏: {node.highlights.Count}");
                    foreach (var highlight in node.highlights)
                    {
                        Debug.Log($"      '{highlight.word}': {highlight.tooltips.Count} —Ç—É–ª—Ç–∏–ø–æ–≤");
                    }
                }

                var availableOptions = DialogManager.Instance.GetAvailableOptions();
                Debug.Log($"   ‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: {availableOptions.Count}");
                for (int i = 0; i < availableOptions.Count; i++)
                {
                    Debug.Log($"      {i}: {availableOptions[i].text}");
                }
            }
        }

        private void OnHighlightsUpdated(DialogNode node)
        {
            if (showDebugInfo && node != null)
            {
                Debug.Log($"üîç –ü–æ–¥—Å–≤–µ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è —É–∑–ª–∞: {node.id}");
                if (HighlightManager.Instance != null)
                {
                    var tooltips = HighlightManager.Instance.GetCurrentTooltips();
                    foreach (var kvp in tooltips)
                    {
                        Debug.Log($"   '{kvp.Key}': {kvp.Value.Count} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç—É–ª—Ç–∏–ø–æ–≤");
                    }
                }
            }
        }

        private void OnTooltipRequested(string word, List<Tooltip> tooltips)
        {
            if (showDebugInfo)
            {
                Debug.Log($"üí¨ –ó–∞–ø—Ä–æ—à–µ–Ω —Ç—É–ª—Ç–∏–ø –¥–ª—è '{word}':");
                foreach (var tooltip in tooltips)
                {
                    Debug.Log($"   - {tooltip.text}");
                }
            }
        }

        [ContextMenu("–¢–µ—Å—Ç: –ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥")]
        public void TestStartDialog()
        {
            if (DialogManager.Instance != null)
            {
                DialogManager.Instance.StartDialog(testDialogId);
            }
            else
            {
                Debug.LogError("DialogManager –Ω–µ –Ω–∞–π–¥–µ–Ω!");
            }
        }

        [ContextMenu("–¢–µ—Å—Ç: –í—ã–±—Ä–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç 0")]
        public void TestSelectOption0()
        {
            if (DialogManager.Instance != null && DialogManager.Instance.IsInDialog)
            {
                DialogManager.Instance.SelectOption(0);
            }
            else
            {
                Debug.LogWarning("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞");
            }
        }

        [ContextMenu("–¢–µ—Å—Ç: –í—ã–±—Ä–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç 1")]
        public void TestSelectOption1()
        {
            if (DialogManager.Instance != null && DialogManager.Instance.IsInDialog)
            {
                DialogManager.Instance.SelectOption(1);
            }
            else
            {
                Debug.LogWarning("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞");
            }
        }

        [ContextMenu("–¢–µ—Å—Ç: –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥")]
        public void TestEndDialog()
        {
            if (DialogManager.Instance != null && DialogManager.Instance.IsInDialog)
            {
                DialogManager.Instance.EndDialog();
            }
            else
            {
                Debug.LogWarning("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è");
            }
        }

        [ContextMenu("–¢–µ—Å—Ç: –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–∏–∞–ª–æ–≥–∏")]
        public void TestShowAllDialogs()
        {
            if (DialogManager.Instance != null)
            {
                var allDialogs = DialogManager.Instance.GetAllDialogs();
                Debug.Log($"üìö –í—Å–µ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –¥–∏–∞–ª–æ–≥–æ–≤: {allDialogs.Count}");
                
                foreach (var dialog in allDialogs.Values)
                {
                    Debug.Log($"   - {dialog.id} (–ì–æ–≤–æ—Ä—è—â–∏–π: {dialog.speaker}, –£–∑–ª–æ–≤: {dialog.nodes.Count})");
                }
            }
            else
            {
                Debug.LogError("DialogManager –Ω–µ –Ω–∞–π–¥–µ–Ω!");
            }
        }

        [ContextMenu("–¢–µ—Å—Ç: –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∏–∞–ª–æ–≥–∏")]
        public void TestReloadDialogs()
        {
            if (DialogManager.Instance != null)
            {
                DialogManager.Instance.LoadDialogs();
                Debug.Log("üîÑ –î–∏–∞–ª–æ–≥–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã");
            }
            else
            {
                Debug.LogError("DialogManager –Ω–µ –Ω–∞–π–¥–µ–Ω!");
            }
        }

        [ContextMenu("–¢–µ—Å—Ç: –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–≤–µ—Ç–∫–∏")]
        public void TestShowHighlights()
        {
            if (HighlightManager.Instance != null)
            {
                var tooltips = HighlightManager.Instance.GetCurrentTooltips();
                Debug.Log($"üîç –¢–µ–∫—É—â–∏–µ –ø–æ–¥—Å–≤–µ—Ç–∫–∏: {tooltips.Count}");
                
                foreach (var kvp in tooltips)
                {
                    Debug.Log($"   '{kvp.Key}': {kvp.Value.Count} —Ç—É–ª—Ç–∏–ø–æ–≤");
                    foreach (var tooltip in kvp.Value)
                    {
                        Debug.Log($"      - {tooltip.text}");
                    }
                }
            }
            else
            {
                Debug.LogError("HighlightManager –Ω–µ –Ω–∞–π–¥–µ–Ω!");
            }
        }

        [ContextMenu("–¢–µ—Å—Ç: –ó–∞–ø—Ä–æ—Å–∏—Ç—å —Ç—É–ª—Ç–∏–ø –¥–ª—è '–Ω–æ–∂'")]
        public void TestRequestTooltipKnife()
        {
            if (HighlightManager.Instance != null)
            {
                HighlightManager.Instance.RequestTooltips("–Ω–æ–∂");
            }
            else
            {
                Debug.LogError("HighlightManager –Ω–µ –Ω–∞–π–¥–µ–Ω!");
            }
        }

        [ContextMenu("–¢–µ—Å—Ç: –°–∫—Ä—ã—Ç—å —Ç—É–ª—Ç–∏–ø—ã")]
        public void TestHideTooltips()
        {
            if (HighlightManager.Instance != null)
            {
                HighlightManager.Instance.HideTooltips();
                Debug.Log("üîç –¢—É–ª—Ç–∏–ø—ã —Å–∫—Ä—ã—Ç—ã");
            }
            else
            {
                Debug.LogError("HighlightManager –Ω–µ –Ω–∞–π–¥–µ–Ω!");
            }
        }

        // –û—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è —Ä–µ–ª–∏–∑–∞
        /*private void Update()
        {
            // –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            if (Input.GetKeyDown(KeyCode.F1))
            {
                TestStartDialog();
            }
            else if (Input.GetKeyDown(KeyCode.F2))
            {
                TestSelectOption0();
            }
            else if (Input.GetKeyDown(KeyCode.F3))
            {
                TestSelectOption1();
            }
            else if (Input.GetKeyDown(KeyCode.F4))
            {
                TestEndDialog();
            }
            else if (Input.GetKeyDown(KeyCode.F5))
            {
                TestShowAllDialogs();
            }
            else if (Input.GetKeyDown(KeyCode.F6))
            {
                TestShowHighlights();
            }
            else if (Input.GetKeyDown(KeyCode.F7))
            {
                TestRequestTooltipKnife();
            }
            else if (Input.GetKeyDown(KeyCode.F8))
            {
                TestHideTooltips();
            }
        }*/
    }
}
